{
  "Commands": [
    {
      "Name": "Initialize-AlwaysOnAvailabilityGroup",
      "Arguments": {
        "DomainAdminAccountName": "$domainAdminAccountName",
        "DomainAdminAccountPassword": "$domainAdminAccountPassword",
        "NodeList": "$nodeList",
        "PrimaryNode": "$primaryNode",
        "DomainName": "$domainName"
      }
    }
  ],
  "Scripts": [
    "SW1wb3J0LU1vZHVsZSBDb3JlRnVuY3Rpb25zIC1Gb3JjZQoKZnVuY3Rpb24gU2hvdy1JbnZvY2F0aW9uSW5mbyB7CiAgICBwYXJhbSAoCiAgICAgICAgJEludm9jYXRpb24sCiAgICAgICAgW1N3aXRjaF0gJEVuZAogICAgKQoKICAgIGlmICgkRW5kKSB7CiAgICAgICAgV3JpdGUtTG9nRGVidWcgIjwvZnVuY3Rpb24gbmFtZT0nJCgkSW52b2NhdGlvbi5NeUNvbW1hbmQuTmFtZSknPiIKICAgIH0KICAgIGVsc2UgewogICAgICAgIFdyaXRlLUxvZ0RlYnVnICI8ZnVuY3Rpb24gbmFtZT0nJCgkSW52b2NhdGlvbi5NeUNvbW1hbmQuTmFtZSknPiIKICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiPHBhcmFtPiIKICAgICAgICBmb3JlYWNoICgkUGFyYW1ldGVyIGluICRJbnZvY2F0aW9uLk15Q29tbWFuZC5QYXJhbWV0ZXJzKSB7CiAgICAgICAgICAgIGZvcmVhY2ggKCRLZXkgaW4gJFBhcmFtZXRlci5LZXlzKSB7CiAgICAgICAgICAgICAgICAkVHlwZSA9ICRQYXJhbWV0ZXJbJEtleV0uUGFyYW1ldGVyVHlwZS5GdWxsTmFtZQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJFZhbHVlIGluICRJbnZvY2F0aW9uLkJvdW5kUGFyYW1ldGVyc1skS2V5XSkgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLUxvZ0RlYnVnICJbJFR5cGVdICRLZXkgPSAnJFZhbHVlJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiPC9wYXJhbT4iCiAgICB9Cn0KCjwjCiMgVXNhZ2UgZXhhbXBsZSBmb3IgU2hvdy1JbnZvY2F0aW9uSW5mbwoKZnVuY3Rpb24gTXlGdW5jdGlvbiB7CiAgICBwYXJhbSAoCiAgICAgICAgW1N0cmluZ10gJFZhbHVlMSwKICAgICAgICBbU3RyaW5nXSAkVmFsdWUyLAogICAgICAgIFtJbnRdICRJbnQxCiAgICApCiAgICBiZWdpbiB7CiAgICAgICAgU2hvdy1JbnZvY2F0aW9uSW5mbyAkTXlJbnZvY2F0aW9uCiAgICB9CiAgICBlbmQgewogICAgICAgIFNob3ctSW52b2NhdGlvbkluZm8gJE15SW52b2NhdGlvbiAtRW5kCiAgICB9CiAgICBwcm9jZXNzIHsKICAgICAgICAjIE1haW4gY29kZSBoZXJlCiAgICB9Cn0KIz4K",
    "",
    "",
    "",
    "CmZ1bmN0aW9uIEV4cG9ydC1GdW5jdGlvbiB7CiAgICBwYXJhbSAoCiAgICAgICAgW1N0cmluZ1tdXSAkTmFtZSwKCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJFBhdGggPSBbSU8uUGF0aF06OkdldFRlbXBGaWxlTmFtZSgpLAoKICAgICAgICBbU3dpdGNoXSAkQWxsCiAgICApCgogICAgaWYgKFtJTy5QYXRoXTo6R2V0RXh0ZW5zaW9uKCRQYXRoKSAtbmUgJ3BzMScpIHsKICAgICAgICAkbnVsbCA9IFJlbmFtZS1JdGVtIC1QYXRoICRQYXRoIC1OZXdOYW1lICIkUGF0aC5wczEiIC1Gb3JjZQogICAgICAgICRQYXRoID0gIiRQYXRoLnBzMSIKICAgIH0KCiAgICAkU3lzdGVtRnVuY3Rpb25zID0gQCgKICAgICAgICAnQTonLCAnQjonLCAnQzonLCAnRDonLCAnRTonLCAnRjonLCAnRzonLCAnSDonLCAnSTonLCAnSjonLAogICAgICAgICdLOicsICdMOicsICdNOicsICdOOicsICdPOicsICdQOicsICdROicsICdSOicsICdTOicsICdUOicsCiAgICAgICAgJ1U6JywgJ1Y6JywgJ1c6JywgJ1g6JywgJ1k6JywgJ1o6JywKICAgICAgICAnY2QuLicsICdjZFwnLCAnaGVscCcsICdta2RpcicsICdtb3JlJywgJ29zcycsICdwcm9tcHQnLAogICAgICAgICdDbGVhci1Ib3N0JywgJ0dldC1WZXJiJywgJ1BhdXNlJywgJ1RhYkV4cGFuc2lvbjInCiAgICApCgogICAgaWYgKCRBbGwpIHsKICAgICAgICBHZXQtQ2hpbGRJdGVtIEZ1bmN0aW9uOiB8CiAgICAgICAgICAgIFdoZXJlLU9iamVjdCB7JF8uTW9kdWxlTmFtZSAtZXEgJyd9IHwKICAgICAgICAgICAgV2hlcmUtT2JqZWN0IHskU3lzdGVtRnVuY3Rpb25zIC1ub3Rjb250YWlucyAkXy5OYW1lfSB8CiAgICAgICAgICAgIEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIEFkZC1Db250ZW50IC1QYXRoICRQYXRoIC1WYWx1ZSBAIgoKCmZ1bmN0aW9uICQoJF8uTmFtZSkgewokKCRfLlNjcmlwdEJsb2NrKQp9CgoiQAogICAgICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBmb3JlYWNoICgkRnVuY3Rpb25OYW1lIGluICROYW1lKSB7CiAgICAgICAgICAgICRGdW5jdGlvbk9iamVjdCA9IEdldC1DaGlsZEl0ZW0gIkZ1bmN0aW9uOlwkRnVuY3Rpb25OYW1lIgogICAgICAgICAgICBpZiAoJEZ1bmN0aW9uT2JqZWN0IC1uZSAkbnVsbCkgewogICAgICAgICAgICAgICAgQWRkLUNvbnRlbnQgLVBhdGggJFBhdGggLVZhbHVlIEAiCgoKZnVuY3Rpb24gJEZ1bmN0aW9uTmFtZSB7CiQoJEZ1bmN0aW9uT2JqZWN0LlNjcmlwdEJsb2NrKQp9CgoiQAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiAkUGF0aAp9Cg==",
    "CmZ1bmN0aW9uIFNlbGVjdC1DbGlYbWxCbG9jayB7CiAgICBwYXJhbSAoCiAgICAgICAgW1N0cmluZ10gJFBhdGgsCiAgICAgICAgW1N0cmluZ10gJE91dEZpbGUgPSBbSU8uUGF0aF06OkdldFRlbXBGaWxlTmFtZSgpCiAgICApCgogICAgJFRhZ0ZvdW5kID0gJGZhbHNlCiAgICBHZXQtQ29udGVudCAkUGF0aCB8CiAgICAgICAgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICBpZiAoJF8gLWVxICcjPCBDTElYTUwnKSB7CiAgICAgICAgICAgICAgICAkVGFnRm91bmQgPSAkdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkVGFnRm91bmQpIHsKICAgICAgICAgICAgICAgIEFkZC1Db250ZW50IC1QYXRoICRPdXRGaWxlIC1WYWx1ZSAkXwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgJE91dEZpbGUKfQoKCgpmdW5jdGlvbiBTdGFydC1Qb3dlclNoZWxsUHJvY2VzcyB7CiAgICBwYXJhbSAoCiAgICAgICAgW1N0cmluZ10gJENvbW1hbmQsCiAgICAgICAgJENyZWRlbnRpYWwgPSAkbnVsbCwKICAgICAgICBbU3dpdGNoXSAkSWdub3JlU3RkRXJyLAogICAgICAgIFtTd2l0Y2hdICROb0Jhc2U2NAogICAgKQogICAgYmVnaW4gewogICAgICAgIFNob3ctSW52b2NhdGlvbkluZm8gJE15SW52b2NhdGlvbgogICAgfQogICAgZW5kIHsKICAgICAgICBTaG93LUludm9jYXRpb25JbmZvICRNeUludm9jYXRpb24gLUVuZAogICAgfQogICAgcHJvY2VzcyB7CiAgICAgICAgJFN0ZE91dCA9IFtJTy5QYXRoXTo6R2V0VGVtcEZpbGVOYW1lKCkKICAgICAgICAkU3RkRXJyID0gW0lPLlBhdGhdOjpHZXRUZW1wRmlsZU5hbWUoKQoKICAgICAgICAkQXJndW1lbnRMaXN0ID0gQCgnLU91dHB1dEZvcm1hdCcsICdYTUwnKQoKICAgICAgICBpZiAoJE5vQmFzZTY0KSB7CiAgICAgICAgICAgICRUbXBTY3JpcHQgPSBbSU8uUGF0aF06OkdldFRlbXBGaWxlTmFtZSgpCiAgICAgICAgICAgIFJlbmFtZS1JdGVtIC1QYXRoICIkVG1wU2NyaXB0IiAtTmV3TmFtZSAiJFRtcFNjcmlwdC5wczEiIC1Gb3JjZQogICAgICAgICAgICAkVG1wU2NyaXB0ID0gIiRUbXBTY3JpcHQucHMxIgoKICAgICAgICAgICAgV3JpdGUtTG9nRGVidWcgJFRtcFNjcmlwdAoKICAgICAgICAgICAgJENvbW1hbmQgfCBPdXQtRmlsZSAkVG1wU2NyaXB0CgogICAgICAgICAgICAkQXJndW1lbnRMaXN0ICs9IEAoJy1GaWxlJywgIiRUbXBTY3JpcHQiKQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJEJ5dGVzID0gW1RleHQuRW5jb2RpbmddOjpVbmljb2RlLkdldEJ5dGVzKCRDb21tYW5kKQogICAgICAgICAgICAkRW5jb2RlZENvbW1hbmQgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRCeXRlcykKICAgICAgICAgICAgCiAgICAgICAgICAgIFdyaXRlLUxvZ0RlYnVnICRFbmNvZGVkQ29tbWFuZAoKICAgICAgICAgICAgJEFyZ3VtZW50TGlzdCArPSBAKCctRW5jb2RlZENvbW1hbmQnLCAkRW5jb2RlZENvbW1hbmQpCiAgICAgICAgfQoKICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAkQXJndW1lbnRMaXN0CgogICAgICAgIFdyaXRlLUxvZyAiU3RhcnRpbmcgZXh0ZXJuYWwgUG93ZXJTaGVsbCBwcm9jZXNzIC4uLiIKCiAgICAgICAgaWYgKCRDcmVkZW50aWFsIC1lcSAkbnVsbCkgewogICAgICAgICAgICAkUHJvY2VzcyA9IFN0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoICdwb3dlcnNoZWxsLmV4ZScgYAogICAgICAgICAgICAgICAgLUFyZ3VtZW50TGlzdCBAKCRBcmd1bWVudExpc3QpIGAKICAgICAgICAgICAgICAgIC1SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ICRTdGRPdXQgYAogICAgICAgICAgICAgICAgLVJlZGlyZWN0U3RhbmRhcmRFcnJvciAkU3RkRXJyIGAKICAgICAgICAgICAgICAgIC1Ob05ld1dpbmRvdyBgCiAgICAgICAgICAgICAgICAtV2FpdCBgCiAgICAgICAgICAgICAgICAtUGFzc1RocnUKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRQcm9jZXNzID0gU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggJ3Bvd2Vyc2hlbGwuZXhlJyBgCiAgICAgICAgICAgICAgICAtQXJndW1lbnRMaXN0IEAoJEFyZ3VtZW50TGlzdCkgYAogICAgICAgICAgICAgICAgLVJlZGlyZWN0U3RhbmRhcmRPdXRwdXQgJFN0ZE91dCBgCiAgICAgICAgICAgICAgICAtUmVkaXJlY3RTdGFuZGFyZEVycm9yICRTdGRFcnIgYAogICAgICAgICAgICAgICAgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgYAogICAgICAgICAgICAgICAgLU5vTmV3V2luZG93IGAKICAgICAgICAgICAgICAgIC1XYWl0IGAKICAgICAgICAgICAgICAgIC1QYXNzVGhydQogICAgICAgIH0KCiAgICAgICAgV3JpdGUtTG9nICJFeHRlcm5hbCBQb3dlclNoZWxsIHByb2Nlc3MgZXhpdGVkIHdpdGggZXhpdCBjb2RlICckKCRQcm9jZXNzLkV4aXRDb2RlKScuIgoKICAgICAgICAjaWYgKCRBcmd1bWVudExpc3QgLWNvbnRhaW5zICctRmlsZScpIHsKICAgICAgICAjICAgIFJlbW92ZS1JdGVtIC1QYXRoICRUbXBTY3JpcHQgLUZvcmNlCiAgICAgICAgI30KCiAgICAgICAgJEVycm9yQWN0aW9uUHJlZmVyZW5jZVNhdmVkID0gJEVycm9yQWN0aW9uUHJlZmVyZW5jZQogICAgICAgICRFcnJvckFjdGlvblByZWZlcmVuY2UgPSAnU2lsZW50bHlDb250aW51ZScKCiAgICAgICAgV3JpdGUtTG9nRGVidWcgIlN0ZE91dCBmaWxlIGlzICckU3RkT3V0JyIKICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiU3RkRXJyIGZpbGUgaXMgJyRTdGRFcnInIgoKICAgICAgICBpZiAoKEdldC1JdGVtICRTdGRPdXQpLkxlbmd0aCAtZ3QgMCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgV3JpdGUtTG9nRGVidWcgIkxvYWRpbmcgU3RkT3V0IGZyb20gJyRTdGRPdXQnIgogICAgICAgICAgICAgICAgJFRtcEZpbGUgPSBTZWxlY3QtQ2xpWG1sQmxvY2sgJFN0ZE91dAogICAgICAgICAgICAgICAgJFN0ZE91dE9iamVjdCA9IEltcG9ydC1DbGl4bWwgJFRtcEZpbGUKICAgICAgICAgICAgICAgIFdyaXRlLUxvZ0RlYnVnICI8U3RkT3V0PiIKICAgICAgICAgICAgICAgIFdyaXRlLUxvZ0RlYnVnICgkU3RkT3V0T2JqZWN0KQogICAgICAgICAgICAgICAgV3JpdGUtTG9nRGVidWcgIjwvU3RkT3V0PiIKICAgICAgICAgICAgICAgICRTdGRPdXRPYmplY3QKICAgICAgICAgICAgICAgICNSZW1vdmUtSXRlbSAtUGF0aCAkVG1wRmlsZSAtRm9yY2UKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSBsb2FkaW5nIFN0ZE91dCBmcm9tICckVG1wRmlsZSciCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICgoR2V0LUl0ZW0gJFN0ZEVycikuTGVuZ3RoIC1ndCAwKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiTG9hZGluZyBTdGRFcnIgLi4uIgogICAgICAgICAgICAgICAgJFRtcEZpbGUgPSBTZWxlY3QtQ2xpWG1sQmxvY2sgJFN0ZEVycgogICAgICAgICAgICAgICAgJFN0ZEVyck9iamVjdCA9IEltcG9ydC1DbGl4bWwgJFRtcEZpbGUKICAgICAgICAgICAgICAgIFdyaXRlLUxvZ0RlYnVnICI8U3RkRXJyPiIKICAgICAgICAgICAgICAgIFdyaXRlLUxvZ0RlYnVnICgkU3RkRXJyT2JqZWN0KQogICAgICAgICAgICAgICAgV3JpdGUtTG9nRGVidWcgIjwvU3RkRXJyPiIKICAgICAgICAgICAgICAgIGlmICgtbm90ICRJZ25vcmVTdGRFcnIpIHsKICAgICAgICAgICAgICAgICAgICAkU3RkRXJyT2JqZWN0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAjUmVtb3ZlLUl0ZW0gLVBhdGggJFRtcEZpbGUgLUZvcmNlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtTG9nRGVidWcgIkFuIGVycm9yIG9jY3VyZWQgd2hpbGUgbG9hZGluZyBTdGRFcnIgZnJvbSAnJFRtcEZpbGUnIgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAkRXJyb3JBY3Rpb25QcmVmZXJlbmNlID0gJEVycm9yQWN0aW9uUHJlZmVyZW5jZVNhdmVkCgogICAgICAgIGlmICgkUHJvY2Vzcy5FeGl0Q29kZSAtbmUgMCkgewogICAgICAgICAgICB0aHJvdygiRXh0ZXJuYWwgUG93ZXJTaGVsbCBwcm9jZXNzIGV4aXRlZCB3aXRoIGNvZGUgJyQoJFByb2Nlc3MuRXhpdENvZGUpJyIpCiAgICAgICAgfQoKICAgICAgICAjUmVtb3ZlLUl0ZW0gJFN0ZE91dCAtRm9yY2UKICAgICAgICAjUmVtb3ZlLUl0ZW0gJFN0ZEVyciAtRm9yY2UKICAgIH0KfQo=",
    ""
  ]
}