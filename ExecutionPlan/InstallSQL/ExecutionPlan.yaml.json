{
  "Commands": [
    {
      "Name": "Install-SQLServer",
      "Arguments": {
        "SAPassword": "",
        "MixedModeAuth": false
      }
    }
  ],
  "RebootOnCompletion": 0,
  "Scripts": [
    "SW1wb3J0LU1vZHVsZSBDb3JlRnVuY3Rpb25zIC1Gb3JjZQ==",
    "IyRFcnJvckFjdGlvblByZWZlcmVuY2UgPSAnU3RvcCcKCmZ1bmN0aW9uIE5ldy1PcHRpb24gKFtzdHJpbmddJE5hbWUsIFtzd2l0Y2hdJFN3aXRjaCwgW3N3aXRjaF0kQm9vbGVhbiwgW3N3aXRjaF0kU3RyaW5nLCBbc3dpdGNoXSRMaXN0LCAkQ29uc3RyYWludHM9JG51bGwpIHsKICAgIDwjCiAgICAuU1lOT1BTSVMKICAgIENyZWF0ZXMgT3B0aW9uIG9iamVjdAoKICAgIC5ERVNDUklQVElPTgogICAgT3B0aW9uIG9iamVjdCBpcyBhIHZpcnR1YWwgb2JqZWN0IHJlcHJlc3RudGluZyB0eXBlZCBjb21tYW5kIGxpbmUgb3B0aW9uLiBUaGVzZSBvYmplY3RzIGVuY2Fwc3VsYXRlIGVzY2FwaW5nIGFuZAogICAgdmFsaWRhdGlvbiBtYXR0ZXJzLgoKICAgIE9uZSBhbmQgb25seSBvbmUgb2YgdGhlIHN3aXRjaGVzICdTd2l0Y2gnLCAnQm9vbGVhbicsICdTdHJpbmcnIG9yICdMaXN0JyBzaG91bGQgYmUgcHJvdmlkZWQuCgogICAgLlBBUkFNRVRFUiBOYW1lCiAgICBPcHRpb24gbmFtZSBhcyBpdCBhcHBlYXJzIGluIHRoZSBjb21tYW5kIGxpbmUuCgogICAgLlBBUkFNRVRFUiBTd2l0Y2gKICAgIFVzZSB0aGlzIHN3aXRjaCB0byBjcmVhdGUgdmFsdWVsZXNzIG9wdGlvbiAoYSBzd2l0Y2gpLgoKICAgIC5QQVJBTUVURVIgQm9vbGVhbgogICAgVXNlIHRoaXMgc3dpdGNoIHRvIGNyZWF0ZSBib29sZWFuIG9wdGlvbi4gSXRzIHZhbHVlIGlzIGFsd2F5cyBjb252ZXJ0ZWQgdG8gIjEiIG9yICIwIgoKICAgIC5QQVJBTUVURVIgU3RyaW5nCiAgICBVc2UgdGhpcyBzd2l0Y2ggdG8gY3JlYXRlIHN0cmluZyBvcHRpb24uIEl0cyB2YWx1ZSB3aWxsIGJlIHByb3Blcmx5IHF1b3RlZCBpZiBuZWNlc3NhcnkuCgogICAgLlBBUkFNRVRFUiBMaXN0CiAgICBVc2UgdGhpcyBzd2l0Y2ggdG8gY3JlYXRlIG9wdGlvbiB3aXRoIGxpc3QgdmFsdWUuIFZhbHVlcyB3aWxsIGJlIHB1dCBpbnRvIGNvbW1hbmQgbGluZSB1c2luZyB2YWxpZCB2YWx1ZSBkZWxlbWl0ZXIgKGEgY29tbWEpCgogICAgLlBBUkFNRVRFUiBDb25zdHJhaW50cwogICAgV2hlbiB0aGlzIHBhcmFtZXRlciBpcyBzcGVjaWZpZWQsIG9wdGlvbiB2YWx1ZXMgYXJlIGxpbWl0ZWQgdG8gb3B0aW9ucyBmcm9tIHRoYXQgbGlzdC4KCiAgICAjPgoKICAgICRPcHRpb24gPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdAoKICAgICMgRmllbGRzCiAgICAkT3B0aW9uIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgVHlwZSAtdmFsdWUgJG51bGwKICAgICRPcHRpb24gfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSBOYW1lIC12YWx1ZSAkbnVsbAogICAgJE9wdGlvbiB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IEFsbG93ZWRWYWx1ZXMgLXZhbHVlICRudWxsCgogICAgIyBJbml0CgogICAgJE9wdGlvbiB8IEFkZC1NZW1iZXIgU2NyaXB0TWV0aG9kIF9faW5pdF9fIHsKICAgICAgICBwYXJhbShbc3RyaW5nXSROYW1lLCAkU3dpdGNoLCAkQm9vbGVhbiwgJFN0cmluZywgJExpc3QpCgogICAgICAgICR0aGlzLk5hbWUgPSAkTmFtZQogICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICMgV2l0aCByZXNwZWN0IGZvciBvdXIgZGV2ZWxvcGVycyB3ZSBkbyBub3QgY2hlY2sgZm9yIGRvdWJsZSB0eXBlIHNlbGVjdGVkCiAgICAgICAgaWYgKCRTd2l0Y2gpIHsKICAgICAgICAgICAgQXVnbWVudE9wdGlvblN3aXRjaCgkdGhpcykKICAgICAgICB9IGVsc2VpZiAoJEJvb2xlYW4pIHsKICAgICAgICAgICAgQXVnbWVudE9wdGlvbkJvb2xlYW4oJHRoaXMpCiAgICAgICAgfSBlbHNlaWYgKCRTdHJpbmcpIHsKICAgICAgICAgICAgQXVnbWVudE9wdGlvblN0cmluZygkdGhpcykKICAgICAgICB9IGVsc2VpZiAoJExpc3QpIHsKICAgICAgICAgICAgQXVnbWVudE9wdGlvbkxpc3QoJHRoaXMpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhyb3cgIlN3aXRjaCwgQm9vbGVhbiwgU3RyaW5nIG9yIExpc3Qgb3B0aW9uIHR5cGUgbXVzdCBiZSBwcm92aWRlZCBmb3Igb3B0aW9uICckTmFtZSciCiAgICAgICAgfQogICAgfQoKICAgICRPcHRpb24gfCBBZGQtTWVtYmVyIFNjcmlwdE1ldGhvZCBfX3Bvc3RfaW5pdF9fIHsKICAgICAgICBwYXJhbSgkQ29uc3RyYWludHM9JG51bGwpCiAgICAgICAgaWYgKCRDb25zdHJhaW50cyAtbmUgJG51bGwpIHsKICAgICAgICAgICAgJHRoaXMuQWxsb3dlZFZhbHVlcyA9IEAoKQogICAgICAgICAgICAkdGhpcy5BbGxvd2VkVmFsdWVzID0gJHRoaXMuQWxsb3dlZFZhbHVlcyArICRDb25zdHJhaW50cwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRDb25zdHJhaW50cyA9ICRudWxsCiAgICAgICAgfQogICAgfQoKICAgICMgTWV0aG9kcwoKICAgICRPcHRpb24gfCBBZGQtTWVtYmVyIC1Gb3JjZSBTY3JpcHRNZXRob2QgVmFsaWRhdGUgewogICAgICAgIGlmICgkdGhpcy5BbGxvd2VkVmFsdWVzIC1uZSAkbnVsbCkgewogICAgICAgICAgICBpZiAoLW5vdCgkdGhpcy5BbGxvd2VkVmFsdWVzIC1jb250YWlucyAkdGhpcy5WYWx1ZSkpIHsKICAgICAgICAgICAgICAgICRDdHMgPSAkdGhpcy5BbGxvd2VkVmFsdWVzIC1qb2luICcsJwogICAgICAgICAgICAgICAgdGhyb3cgIk9wdGlvbiAnJCgkdGhpcy5OYW1lKScgbWF5IGhhdmUgdmFsdWVzICgkQ3RzKSBidXQgbm90ICckKCR0aGlzLlZhbHVlKSciCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgJE9wdGlvbiB8IEFkZC1NZW1iZXIgLUZvcmNlIFNjcmlwdE1ldGhvZCBUb1N0cmluZyB7CiAgICAgICAgcmV0dXJuICIvJCgkdGhpcy5OYW1lKSIKICAgIH0KCiAgICAjIGludm9rZSBjb25zdHJ1Y3RvcgoKICAgICRPcHRpb24uX19pbml0X18oJE5hbWUsICRTd2l0Y2gsICRCb29sZWFuLCAkU3RyaW5nLCAkTGlzdCkKICAgICRPcHRpb24uX19wb3N0X2luaXRfXygkQ29uc3RyYWludHMpCgogICAgcmV0dXJuICRPcHRpb24KfQoKZnVuY3Rpb24gQXVnbWVudE9wdGlvblN3aXRjaCgkT3B0aW9uKSB7Cn0KCmZ1bmN0aW9uIEF1Z21lbnRPcHRpb25Cb29sZWFuKCRPcHRpb24pIHsKICAgICMgRmllbGRzCiAgICAkT3B0aW9uIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgVmFsdWUgLXZhbHVlICRmYWxzZQoKICAgICMgTWV0aG9kcwoKICAgICRPcHRpb24gfCBBZGQtTWVtYmVyIC1Gb3JjZSBTY3JpcHRNZXRob2QgVG9TdHJpbmcgewogICAgICAgIGlmICgkdGhpcy5WYWx1ZSkgewogICAgICAgICAgICByZXR1cm4gIi8kKCR0aGlzLk5hbWUpPTEiCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuICIvJCgkdGhpcy5OYW1lKT0wIgogICAgICAgIH0KICAgIH0KfQoKZnVuY3Rpb24gQXVnbWVudE9wdGlvblN0cmluZygkT3B0aW9uKSB7CiAgICAjIEZpZWxkcwogICAgJE9wdGlvbiB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IFZhbHVlIC12YWx1ZSAiIgoKICAgICMgTWV0aG9kcwoKICAgICRPcHRpb24gfCBBZGQtTWVtYmVyIC1Gb3JjZSBTY3JpcHRNZXRob2QgVG9TdHJpbmcgewogICAgICAgICR2ID0gIiQoJHRoaXMuVmFsdWUpIgogICAgICAgIGlmICgkdiAtbWF0Y2ggJy4qIC4qJykgewogICAgICAgICAgICAjIFRPRE86IEVzY2FwZSBkb3VibGUgcXVvdGUgY2hhcmFjdGVycyBpZiBwb3NzaWJsZQogICAgICAgICAgICByZXR1cm4gIi8kKCR0aGlzLk5hbWUpPWAiJHZgIiIKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gIi8kKCR0aGlzLk5hbWUpPSR2IgogICAgICAgIH0KICAgIH0KfQoKZnVuY3Rpb24gQXVnbWVudE9wdGlvbkxpc3QoJE9wdGlvbikgewogICAgIyBGaWVsZHMKICAgICRPcHRpb24gfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSBWYWx1ZSAtdmFsdWUgQCgpCgogICAgIyBNZXRob2RzCgogICAgJE9wdGlvbiB8IEFkZC1NZW1iZXIgLUZvcmNlIFNjcmlwdE1ldGhvZCBWYWxpZGF0ZSB7CiAgICAgICAgaWYgKCR0aGlzLkFsbG93ZWRWYWx1ZXMgLW5lICRudWxsKSB7CiAgICAgICAgICAgIGZvcmVhY2ggKCRWIGluICR0aGlzLlZhbHVlKSB7CiAgICAgICAgICAgICAgICBpZiAoLW5vdCgkdGhpcy5BbGxvd2VkVmFsdWVzIC1jb250YWlucyAkVikpIHsKICAgICAgICAgICAgICAgICAgICAkQ3RzID0gJHRoaXMuQWxsb3dlZFZhbHVlcyAtam9pbiAnLCcKICAgICAgICAgICAgICAgICAgICB0aHJvdyAiT3B0aW9uICckKCR0aGlzLk5hbWUpJyBtYXkgaGF2ZSB2YWx1ZXMgKCRDdHMpIGJ1dCBub3QgJyRWJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAkT3B0aW9uIHwgQWRkLU1lbWJlciAtRm9yY2UgU2NyaXB0TWV0aG9kIFRvU3RyaW5nIHsKICAgICAgICByZXR1cm4gIi8kKCR0aGlzLk5hbWUpPSQoJHRoaXMuVmFsdWUgLWpvaW4gJywnKSIKICAgIH0KfQoKZnVuY3Rpb24gTmV3LU9wdGlvblBhcnNlcigpIHsKICAgIDwjCiAgICAuU1lOT1BTSVMKICAgIENyZWF0ZXMgT3B0aW9uUGFyc2VyIG9iamVjdC4KCiAgICAuREVTQ1JJUFRJT04KICAgIE9wdGlvblBhcnNlciBvYmplY3QgbGV2ZXJhZ2VzIE9wdGlvbiBvYmplY3RzIGNhcGFiaWxpdGllcyBhbmQgYnVpbGRzIHZhbGlkIGNvbW1hbmQgbGluZSB1c2luZyBzcGVjaWZpZWQgb3B0aW9ucy4KICAgIEFuIGFwcGxpY2F0aW9uIG1heSBhbHNvIGJlIGludm9rZWQgd2l0aCBPcHRpb25QYXJzZXIuCgogICAgIz4KCiAgICAkT3B0aW9uUGFyc2VyID0gTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QKCiAgICAjIEZpZWxkcwogICAgJE9wdGlvblBhcnNlciB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IE9wdGlvbnMgLXZhbHVlIEB7fQogICAgJE9wdGlvblBhcnNlciB8IEFkZC1NZW1iZXIgTm90ZVByb3BlcnR5IERlZmF1bHRzIC12YWx1ZSBAe30KICAgICRPcHRpb25QYXJzZXIgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSBSZXF1aXJlZE9wdGlvbnMgLXZhbHVlIEAoKQoKICAgICMgTWV0aG9kcwoKICAgICRPcHRpb25QYXJzZXIgfCBBZGQtTWVtYmVyIFNjcmlwdE1ldGhvZCBBZGRPcHRpb24gewogICAgICAgIDwjCiAgICAgICAgLlNZTk9QU0lTCiAgICAgICAgQWRkcyBzdXBwb3J0ZWQgb3B0aW9uIGludG8gT3B0aW9uUGFyc2VyLgogICAgICAgIAogICAgICAgIC5ERVNDUklQVElPTgogICAgICAgIE9wdGlvblBhcnNlciBkb2VzIG5vdCBhbGxvdyB1c2luZyB1bnJlY29nbml6ZWQgb3B0aW9ucy4gVXNlIHRoaXMgbWV0aG9kIHRvIGZpbGwgT3B0aW9uUGFyc2VyIHdpdGggcmVjb2duaXplZCBvcHRpb25zCgogICAgICAgIC5QQVJBTUVURVIgT3B0aW9uCiAgICAgICAgT3B0aW9uIG9iamVjdAoKICAgICAgICAuUEFSQU1FVEVSIFJlcXVpcmVkCiAgICAgICAgUmVxdWlyZWQgb3B0aW9uIHN3aXRjaAoKICAgICAgICAuUEFSQU1FVEVSIERlZmF1bHQKICAgICAgICBPcHRpb24gZGVmYXVsdCB2YWx1ZQogICAgICAgICM+CiAgICAgICAgcGFyYW0oJE9wdGlvbiwgW2Jvb2xdJFJlcXVpcmVkPSRmYWxzZSwgJERlZmF1bHQ9JG51bGwpCiAgICAgICAgJHRoaXMuT3B0aW9ucy5BZGQoJE9wdGlvbi5OYW1lLCAkT3B0aW9uKQogICAgICAgIGlmICgkUmVxdWlyZWQpIHsKICAgICAgICAgICAgJHRoaXMuUmVxdWlyZWRPcHRpb25zID0gJHRoaXMuUmVxdWlyZWRPcHRpb25zICsgJE9wdGlvbi5OYW1lCiAgICAgICAgICAgIGlmICgkT3B0aW9uIHwgR2V0LU1lbWJlciAiVmFsdWUiKSB7CiAgICAgICAgICAgICAgICBpZiAoJERlZmF1bHQpIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy5EZWZhdWx0cy5BZGQoJE9wdGlvbi5OYW1lLCAkRGVmYXVsdCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICR0aGlzLkRlZmF1bHRzLkFkZCgkT3B0aW9uLk5hbWUsICRudWxsKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgICRPcHRpb25QYXJzZXIgfCBBZGQtTWVtYmVyIFNjcmlwdE1ldGhvZCBQYXJzZSB7CiAgICAgICAgPCMKICAgICAgICAuU1lOT1BTSVMKICAgICAgICBQYXJzZXMgc3VwcGxpZWQgb3B0aW9ucyBhbmQgcmV0dXJucyBjb21tYW5kIGxpbmUgcGFyYW1ldGVycyBhcnJheS4KICAgICAgICAKICAgICAgICAuREVTQ1JJUFRJT04KICAgICAgICBUaGlzIG1ldGhvZCB2ZXJpZmllcyB0aGF0IG9ubHkgc3VwcG9ydGVkIG9wdGlvbnMgYXJlIHByb3ZpZGVkLCBhbGwgbWFuZGF0b3J5IG9wdGlvbnMgYXJlIGluIHBsYWNlLCAKICAgICAgICBhbGwgb3B0aW9uIG1lZXQgY29uc3RyYWludHMgaWYgYW55LiBVbnNwZWNpZmllZCBvcHRpb25zIHdpdGggZGVmYXVsdCB2YWx1ZXMgYXJlIGFkZGVkIHRvIGNvbW1hbmQgbGluZS4KICAgICAgICBTbywgbWFuZGF0b3J5IG9wdGlvbiB3aXRoIGRlZmF1bHQgdmFsdWUgbmV2ZXIgY2F1c2VzIGV4Y2VwdGlvbi4KCiAgICAgICAgLlBBUkFNRVRFUiBPcHRpb25zCiAgICAgICAgQSBoYXNoIG1hcCBvZiBvcHRpb25zIHRvIHBhcnNlLiBPcHRpb24gbmFtZXMgc2hvdWxkIGJlIG1hcHBlZCB0byBjb3JyZXNwb25kaW5nIHZhbHVlcy4KICAgICAgICAjPgogICAgICAgIHBhcmFtKFtoYXNodGFibGVdJE9wdGlvbnMpCgogICAgICAgICRDb21tYW5kTGluZSA9IEAoKQogICAgICAgIGZvcmVhY2ggKCRSZXF1aXJlZE9wdGlvbk5hbWUgaW4gJHRoaXMuUmVxdWlyZWRPcHRpb25zKSB7CiAgICAgICAgICAgIGlmICgtbm90ICRPcHRpb25zLkNvbnRhaW5zS2V5KCRSZXF1aXJlZE9wdGlvbk5hbWUpKSB7CiAgICAgICAgICAgICAgICAkRGVmYXVsdCA9ICR0aGlzLkRlZmF1bHRzLkdldF9JdGVtKCRSZXF1aXJlZE9wdGlvbk5hbWUpCiAgICAgICAgICAgICAgICBpZiAoJHRoaXMuRGVmYXVsdHMuQ29udGFpbnNLZXkoJFJlcXVpcmVkT3B0aW9uTmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICAkT3B0aW9ucy5BZGQoJFJlcXVpcmVkT3B0aW9uTmFtZSwgJHRoaXMuRGVmYXVsdHMuR2V0X0l0ZW0oJFJlcXVpcmVkT3B0aW9uTmFtZSkpCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRocm93ICJSZXF1aXJlZCBvcHRpb24gJyRSZXF1aXJlZE9wdGlvbk5hbWUnIGlzIG1pc3NpbmciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZvcmVhY2ggKCRPcHRpb25OYW1lIGluICQoJE9wdGlvbnMua2V5cykpIHsKICAgICAgICAgICAgJE9wdGlvbiA9ICR0aGlzLk9wdGlvbnMuR2V0X0l0ZW0oJE9wdGlvbk5hbWUpCiAgICAgICAgICAgIGlmICgkT3B0aW9uIC1lcSAkbnVsbCkgewogICAgICAgICAgICAgICAgdGhyb3cgIk9wdGlvbiAnJE9wdGlvbk5hbWUnIGlzIG5vdCBhbGxvd2VkIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkT3B0aW9uIHwgR2V0LU1lbWJlciAiVmFsdWUiKSB7CiAgICAgICAgICAgICAgICAkT3B0aW9uLlZhbHVlID0gJE9wdGlvbnMuR2V0X0l0ZW0oJE9wdGlvbk5hbWUpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJE9wdGlvbi5WYWxpZGF0ZSgpCiAgICAgICAgICAgICRDb21tYW5kTGluZSA9ICRDb21tYW5kTGluZSArICRPcHRpb24uVG9TdHJpbmcoKQogICAgICAgIH0KICAgICAgICByZXR1cm4gJENvbW1hbmRMaW5lCiAgICB9CgogICAgJE9wdGlvblBhcnNlciB8IEFkZC1NZW1iZXIgU2NyaXB0TWV0aG9kIEV4ZWN1dGVCaW5hcnkgewogICAgICAgIHBhcmFtKCRCaW5hcnksIFtoYXNodGFibGVdJE9wdGlvbnMgPSBAe30sICRDb21tYW5kTGluZVN1ZmZpeCA9IEAoKSkKICAgICAgICA8IwogICAgICAgIC5TWU5PUFNJUwogICAgICAgIEV4ZWN1dGVzIGJpbmFyeSB3aXRoIGEgY29tbWFuZCBsaW5lIGNvbnN0cnVjdGVkIGZyb20gcHJvdmlkZWQgb3B0aW9ucy4gQW4gYXJiaXRyYXJ5IHN1ZmZpeCBtYXkgYmUgCiAgICAgICAgYXBwZW5kZWQgdG8gdGhlIGNvbW1hbmQgbGluZS4KICAgICAgICAKICAgICAgICAuREVTQ1JJUFRJT04KICAgICAgICBUaGlzIG1ldGhvZCB1c2VzIE9wdGlvblBhcnNlci5QYXJzZSBtZXRob2QgdG8gY29uc3RydWN0IGNvbW1hbmQgbGluZS4gSWYgdGhlcmUgYSBjb21tYW5kIGxpbmUgc3VmZml4IAogICAgICAgIHdhcyBzdXBwbGllZCwgaXQgaXMgYXBwZW5kZWQgdG8gdGhlIGVuZCBvZiBjb21tYW5kIGxpbmUuIE5vcm1hbGx5IGNvbW1hbmQgbGluZSBzdWZmaXggc2hvdWxkIGNvbnRhaW4KICAgICAgICBsZWFkaW5nIHNwYWNlIGNoYXJhY3Rlci4KCiAgICAgICAgTWV0aG9kIHdhaXRzIGZvciBleGVjdXRhYmxlIHByb2Nlc3MgdG8gY29tcGxldGUgYW5kIHJldHVybnMgaXRzIGV4aXQgY29kZS4KCiAgICAgICAgLlBBUkFNRVRFUiBCaW5hcnkKICAgICAgICBGdWxsIG9yIHJlbGF0aXZlIHBhdGggdG8gdGhlIGV4ZWN1dGFibGUgdG8gcnVuLgoKICAgICAgICAuUEFSQU1FVEVSIE9wdGlvbnMKICAgICAgICBBIGhhc2ggbWFwIG9mIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgZXhlY3V0YWJsZS4KCiAgICAgICAgLlBBUkFNRVRFUiBDb21tYW5kTGluZVN1ZmZpeAogICAgICAgIEFyYml0cmFyeSBjb21tYW5kIGxpbmUgc3VmZml4LiBOb3JtYWxseSBpdCBzaG91ZCBoYXZlIGxlYWRpbmcgc3BhY2UgY2hhcmFjdGVyLgogICAgICAgICM+CgogICAgICAgICRCaW5hcnkgPSBHZXQtSXRlbSAkQmluYXJ5CiAgICAgICAgJENvbW1hbmRMaW5lID0gJHRoaXMuUGFyc2UoJE9wdGlvbnMpCiAgICAgICAgaWYgKCRDb21tYW5kTGluZVN1ZmZpeCkgewogICAgICAgICAgICAkQ29tbWFuZExpbmUgPSAkQ29tbWFuZExpbmUgKyAkQ29tbWFuZExpbmVTdWZmaXgKICAgICAgICB9CgogICAgICAgIFdyaXRlLUhvc3QgIkV4ZWN1dGluZzogJCgkQmluYXJ5LkZ1bGxOYW1lKSAkKCRDb21tYW5kTGluZSAtam9pbiAnICcpIgogICAgICAgICRwcm9jZXNzID0gW1N5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzXTo6U3RhcnQoJEJpbmFyeSwgJENvbW1hbmRMaW5lKQogICAgICAgICRwcm9jZXNzLldhaXRGb3JFeGl0KCkKICAgICAgICAkcHJvY2Vzcy5SZWZyZXNoKCkKICAgICAgICByZXR1cm4gJHByb2Nlc3MuRXhpdENvZGUKICAgIH0KCiAgICByZXR1cm4gJE9wdGlvblBhcnNlcgp9CgojRXhwb3J0LU1vZHVsZU1lbWJlciAtRnVuY3Rpb24gTmV3LU9wdGlvblBhcnNlcgojRXhwb3J0LU1vZHVsZU1lbWJlciAtRnVuY3Rpb24gTmV3LU9wdGlvbg==",
    "",
    "",
    "RnVuY3Rpb24gSW5zdGFsbC1TcWxTZXJ2ZXIgewogICAgcGFyYW0gKAogICAgICAgIFtTdHJpbmddICRTZXR1cFJvb3QgPSAnJywKICAgICAgICBbU3RyaW5nXSAkU0FQYXNzd29yZCA9ICcnLAogICAgICAgIFtTdHJpbmddICRNdXJhbm9GaWxlU2hhcmUgPSAnJywKICAgICAgICBbQm9vbGVhbl0gJE1peGVkTW9kZUF1dGggPSAkZmFsc2UKICAgICkKICAgIAogICAgaWYgKCRTZXR1cFJvb3QgLWVxICcnKSB7CiAgICAgICAgaWYgKCRNdXJhbm9GaWxlU2hhcmUgLWVxICcnKSB7CiAgICAgICAgICAgICRNdXJhbm9GaWxlU2hhcmUgPSBbRW52aXJvbm1lbnRdOjpHZXRFbnZpcm9ubWVudFZhcmlhYmxlKCdNdXJhbm9GaWxlU2hhcmUnKQogICAgICAgICAgICBpZiAoJE11cmFub0ZpbGVTaGFyZSAtZXEgJycpIHsKICAgICAgICAgICAgICAgIHRocm93KCJVbmFibGUgdG8gZmluZCBNdXJhbm9GaWxlU2hhcmUgcGF0aC4iKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgICRTZXR1cFJvb3QgPSBbSU8uUGF0aF06OkNvbWJpbmUoJE11cmFub0ZpbGVTaGFyZSwgJ1ByZXJlcXVpc2l0ZXNcU1FMIFNlcnZlclwyMDEyJykKICAgIH0KICAgIAoKICAgICRFeHRyYU9wdGlvbnMgPSBAe30KICAgIAogICAgaWYgKCRNaXhlZE1vZGVBdXRoKSB7CiAgICAgICAgJEV4dHJhT3B0aW9ucyArPSBAeydTRUNVUklUWU1PREUnID0gJ1NRTCd9CiAgICB9CiAgICAKICAgIGlmICgkU0FQYXNzd29yZCAtbmUgJycpIHsKICAgICAgICAkRXh0cmFPcHRpb25zICs9IEB7J1NBUFdEJyA9ICRTQVBhc3N3b3JkfQogICAgfQogICAgCiAgICBOZXctU3FsU2VydmVyIC1TZXR1cFJvb3QgJFNldHVwUm9vdCAtRXh0cmFPcHRpb25zICRFeHRyYU9wdGlvbnMKfQo="
  ]
}