{
  "Commands": [
    {
      "Name": "Install-SqlServerPowerShellModule",
      "Arguments": {}
    },
    {
      "Name": "Disable-Firewall",
      "Arguments": {}
    },
    {
      "Name": "New-SharedFolderForAOAG",
      "Arguments": {
        "PrimaryNode": "$primaryNode"
      }
    }
  ],
  "Scripts": [
    "SW1wb3J0LU1vZHVsZSBDb3JlRnVuY3Rpb25zIC1Gb3JjZQoKZnVuY3Rpb24gU2hvdy1JbnZvY2F0aW9uSW5mbyB7CiAgICBwYXJhbSAoCiAgICAgICAgJEludm9jYXRpb24sCiAgICAgICAgW1N3aXRjaF0gJEVuZAogICAgKQoKICAgIGlmICgkRW5kKSB7CiAgICAgICAgV3JpdGUtTG9nRGVidWcgIjwvZnVuY3Rpb24gbmFtZT0nJCgkSW52b2NhdGlvbi5NeUNvbW1hbmQuTmFtZSknPiIKICAgIH0KICAgIGVsc2UgewogICAgICAgIFdyaXRlLUxvZ0RlYnVnICI8ZnVuY3Rpb24gbmFtZT0nJCgkSW52b2NhdGlvbi5NeUNvbW1hbmQuTmFtZSknPiIKICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiPHBhcmFtPiIKICAgICAgICBmb3JlYWNoICgkUGFyYW1ldGVyIGluICRJbnZvY2F0aW9uLk15Q29tbWFuZC5QYXJhbWV0ZXJzKSB7CiAgICAgICAgICAgIGZvcmVhY2ggKCRLZXkgaW4gJFBhcmFtZXRlci5LZXlzKSB7CiAgICAgICAgICAgICAgICAkVHlwZSA9ICRQYXJhbWV0ZXJbJEtleV0uUGFyYW1ldGVyVHlwZS5GdWxsTmFtZQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJFZhbHVlIGluICRJbnZvY2F0aW9uLkJvdW5kUGFyYW1ldGVyc1skS2V5XSkgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLUxvZ0RlYnVnICJbJFR5cGVdICRLZXkgPSAnJFZhbHVlJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBXcml0ZS1Mb2dEZWJ1ZyAiPC9wYXJhbT4iCiAgICB9Cn0KCjwjCiMgVXNhZ2UgZXhhbXBsZSBmb3IgU2hvdy1JbnZvY2F0aW9uSW5mbwoKZnVuY3Rpb24gTXlGdW5jdGlvbiB7CiAgICBwYXJhbSAoCiAgICAgICAgW1N0cmluZ10gJFZhbHVlMSwKICAgICAgICBbU3RyaW5nXSAkVmFsdWUyLAogICAgICAgIFtJbnRdICRJbnQxCiAgICApCiAgICBiZWdpbiB7CiAgICAgICAgU2hvdy1JbnZvY2F0aW9uSW5mbyAkTXlJbnZvY2F0aW9uCiAgICB9CiAgICBlbmQgewogICAgICAgIFNob3ctSW52b2NhdGlvbkluZm8gJE15SW52b2NhdGlvbiAtRW5kCiAgICB9CiAgICBwcm9jZXNzIHsKICAgICAgICAjIE1haW4gY29kZSBoZXJlCiAgICB9Cn0KIz4K",
    "",
    "CmZ1bmN0aW9uIE5ldy1TcWxTZXJ2ZXJTeXN0ZW1BY2NvdW50IHsKICAgIHBhcmFtICgKICAgICAgICAjIChSRVFVSVJFRCkgRG9tYWluIE5hbWUKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJERvbWFpbk5hbWUsCgogICAgICAgICMgKFJFUVVJUkVEKSBVc2VyIG5hbWUgd2hvIGhhcyBwZXJtaXNzaW9ucyB0byBjcmVhdGUgYW5kIG1vZGlmeSB1c2VyUGFzc3dvcmQKICAgICAgICAjIFVzdWFsbHkgdGhpcyBpcyB0aGUgZG9tYWluIGFkbWluaXN0cmF0b3IgJyRkb21haW5OYW1lXEFkbWluaXN0cmF0b3InIGFjY291bnQKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kdHJ1ZSldCiAgICAgICAgW1N0cmluZ10gJFVzZXJOYW1lLAoKICAgICAgICAjIChSRVFVSVJFRCkgUGFzc3dvcmQgZm9yIHRoYXQgdXNlcgogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSR0cnVlKV0KICAgICAgICBbU3RyaW5nXSAkVXNlclBhc3N3b3JkLAoKICAgICAgICAjIChSRVFVSVJFRCkgVXNlciBuYW1lIGZvciBhIG5ldyBhY2NvdW50IHRoYXQgd2lsbCBiZSB1c2VkIHRvIHJ1biBTUUwgU2VydmVyCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRTUUxTZXJ2aWNlVXNlck5hbWUsCgogICAgICAgICMgKFJFUVVJUkVEKSBQYXNzd29yZCBmb3IgdGhhdCB1c2VyCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUpXQogICAgICAgIFtTdHJpbmddICRTUUxTZXJ2aWNlVXNlclBhc3N3b3JkLAoKICAgICAgICBbU3RyaW5nXSAkUHJpbWFyeU5vZGUgPSAnICcKICAgICkKCiAgICBpZiAoJFByaW1hcnlOb2RlLlRvTG93ZXIoKSAtbmUgKCRFbnY6Q29tcHV0ZXJOYW1lKS5Ub0xvd2VyKCkpIHsKICAgICAgICBXcml0ZS1Mb2cgIlRIaXMgZnVuY3Rpb24gcnVucyBvbiBBT0FHIHByaW1hcnkgbm9kZSBvbmx5LiIKICAgICAgICBXcml0ZS1Mb2cgIkV4aXRpbmcuIgogICAgICAgIHJldHVybgogICAgfQoKICAgIFdyaXRlLUxvZyAiSW5zdGFsbGluZyAnUlNBVC1BRC1Qb3dlclNoZWxsJyAuLi4gIgogICAgQWRkLVdpbmRvd3NGZWF0dXJlIFJTQVQtQUQtUG93ZXJTaGVsbAoKICAgIEltcG9ydC1Nb2R1bGUgQWN0aXZlRGlyZWN0b3J5CgogICAgJENyZWRzID0gTmV3LUNyZWRlbnRpYWwgLVVzZXJOYW1lICIkRG9tYWluTmFtZVwkVXNlck5hbWUiIC1QYXNzd29yZCAiJFVzZXJQYXNzd29yZCIKCiAgICBXcml0ZS1Mb2cgIkFkZGluZyBuZXcgdXNlciAuLi4iCiAgICAkbnVsbCA9IE5ldy1BRFVzZXIgYAogICAgICAgIC1OYW1lICRTUUxTZXJ2aWNlVXNlck5hbWUgYAogICAgICAgIC1BY2NvdW50UGFzc3dvcmQgJChDb252ZXJ0VG8tU2VjdXJlU3RyaW5nIC1TdHJpbmcgJFNRTFNlcnZpY2VVc2VyUGFzc3dvcmQgLUFzUGxhaW5UZXh0IC1Gb3JjZSkgYAogICAgICAgIC1DcmVkZW50aWFsICRDcmVkcyBgCiAgICAgICAgLUVycm9yQWN0aW9uICdTdG9wJwp9Cg=="
  ]
}