# lib/murano

# Dependencies:
# ``functions`` file
# ``DEST``, ``DATA_DIR``, ``STACK_USER`` must be defined

# ``stack.sh`` calls the entry points in this order:
#
# install_murano
# configure_murano
# start_murano
# stop_murano


# Save trace setting
XTRACE=$(set +o | grep xtrace)
set -o xtrace



# Defaults
# --------

# Configuration defaults
#-----------------------
ADMIN_USER=${ADMIN_USER:-OS_USERNAME}
ADMIN_PASSWORD=${ADMIN_PASSWORD:-OS_PASSWORD}

MURANO_RABBIT_LOGIN=${MURANO_RABBIT_LOGIN:-'guest'}
MURANO_RABBIT_PASSWORD=${MURANO_RABBIT_PASSWORD:-$RABBIT_PASSWORD}
MURANO_RABBIT_VHOST=${MURANO_RABBIT_VHOST:-'/'}
MURANO_RABBIT_PORT=${MURANO_RABBIT_PORT:-5672}
MURANO_RABBIT_HOST=${MURANO_RABBIT_HOST:-$HOST_IP}
MURANO_RABBIT_HOST_ALT=${MURANO_RABBIT_HOST_ALT:-$MURANO_RABBIT_HOST}

MURANO_FILE_SHARE_HOST=${MURANO_FILE_SHARE_HOST:-$HOST_IP}

# Only 'true' or 'false' values are allowed!
MURANO_SSL_ENABLED=${MURANO_SSL_ENABLED:-'false'}
MURANO_SSL_CA_FILE=${MURANO_SSL_CA_FILE:-''}
MURANO_SSL_CERT_FILE=${MURANO_SSL_CERT_FILE:-''}
MURANO_SSL_KEY_FILE=${MURANO_SSL_KEY_FILE:-''}
#-----------------------


# List of config files to be updated for Murano
#----------------------------------------------
MURANO_CONFIG_FILES='/etc/murano/murano-api.conf
/etc/murano/murano-api-paste.ini
/etc/murano/conductor.conf
/etc/murano/conductor-paste.ini
/etc/murano/murano-repository.conf
/etc/murano/init-scripts/init.ps1
/etc/murano/agent-config/Default.template'
#/usr/share/openstack-dashboard/openstack_dashboard/settings.py'
#----------------------------------------------


# Set up default repos
#---------------------
MURANO_BRANCH=${MURANO_BRANCH:-master}

MURANO_API_REPO=${MURANO_API_REPO:-${GIT_BASE}/stackforge/murano-api.git}
MURANO_API_BRANCH=${MURANO_API_BRANCH:-$MURANO_BRANCH}

MURANO_CONDUCTOR_REPO=${MURANO_CONDUCTOR_REPO:-${GIT_BASE}/stackforge/murano-conductor.git}
MURANO_CONDUCTOR_BRANCH=${MURANO_CONDUCTOR_BRANCH:-$MURANO_BRANCH}

MURANO_REPOSITORY_REPO=${MURANO_REPOSITORY_REPO:-${GIT_BASE}/stackforge/murano-repository.git}
MURANO_REPOSITORY_BRANCH=${MURANO_REPOSITORY_BRANCH:-$MURANO_BRANCH}

MURANO_DASHBOARD_REPO=${MURANO_DASHBOARD_REPO:-${GIT_BASE}/stackforge/murano-dashboard.git}
MURANO_DASHBOARD_BRANCH=${MURANO_DASHBOARD_BRANCH:-$MURANO_BRANCH}

MURANO_COMMON_REPO=${MURANO_COMMON_REPO:-${GIT_BASE}/stackforge/murano-common.git}
MURANO_COMMON_BRANCH=${MURANO_COMMON_BRANCH:-$MURANO_BRANCH}

MURANO_METADATACLIENT_REPO=${MURANO_METADATACLIENT_REPO:-${GIT_BASE}/stackforge/murano-metadataclient.git}
MURANO_METADATACLIENT_BRANCH=${MURANO_METADATACLIENT_BRANCH:-$MURANO_BRANCH}

MURANO_PYTHONCLIENT_REPO=${MURANO_PYTHONCLIENT_REPO:-${GIT_BASE}/stackforge/python-muranoclient.git}
MURANO_PYTHONCLIENT_BRANCH=${MURANO_PYTHONCLIENT_BRANCH:-$MURANO_BRANCH}
#---------------------


# Murano dirs and config files
#-----------------------------
MURANO_API_DIR=$DEST/murano-api
MURANO_CONDUCTOR_DIR=$DEST/murano-conductor
MURANO_REPOSITORY_DIR=$DEST/murano-repository
MURANO_DASHBOARD_DIR=$DEST/murano-dashboard
MURANO_COMMON_DIR=$DEST/murano-common
MURANO_METADATACLIENT_DIR=$DEST/murano-metadataclient
MURANO_PYTHONCLIENT_DIR=$DEST/python-muranoclient

MURANO_API_BIN_DIR=$MURANO_API_DIR/bin
MURANO_CONDUCTOR_BIN_DIR=$MURANO_CONDUCTOR_DIR/bin
MURANO_REPOSITORY_BIN_DIR=$MURANO_REPOSITORY_DIR/bin

MURANO_CONF_DIR=${MURANO_CONF_DIR:-/etc/murano}
MURANO_API_CONF_FILE=murano-api.conf
MURANO_CONDUCTOR_CONF_FILE=murano-conductor.conf
MURANO_REPOSITORY_CONF_FILE=murano-repository.conf
#-----------------------------


# Other options
#--------------
MURANO_DEBUG=${MURANO_DEBUG:-True}

MURANO_SSL_ENABLED=${MURANO_SSL_ENABLED:-'false'}

MURANO_SERVICE_PROTOCOL=${MURANO_SERVICE_PROTOCOL:-$SERVICE_PROTOCOL}
MURANO_SERVICE_HOST=${MURANO_SERVICE_HOST:-$SERVICE_HOST}
MURANO_SERVICE_PORT=${MURANO_SERVICE_PORT:-8082}

MURANO_LOG_DIR=/var/log/murano

MURANO_CACHE_DIR=/tmp
MURANO_CONDUCTOR_CACHE=$MURANO_CACHE_DIR/muranoconductor-cache
MURANO_REPOSITORY_CACHE=$MURANO_CACHE_DIR/muranorepository-cache
#--------------


# Local variables
#----------------
auth_host=$HOST_IP
auth_url=$KEYSTONE_SERVICE_PROTOCOL://$KEYSTONE_SERVICE_HOST:$KEYSTONE_SERVICE_PORT/v2.0
#----------------



# Functions
# ---------

function replace {
    sed -i "s/$1/$2/g" "$3"
}

# create_murano_accounts() - Set up common required murano accounts
#
# Tenant      User       Roles
# ------------------------------
# service     murano     admin
function create_murano_accounts() {

    SERVICE_TENANT=$(keystone tenant-list | awk "/ $SERVICE_TENANT_NAME / { print \$2 }")
    ADMIN_ROLE=$(keystone role-list | awk "/ admin / { print \$2 }")

    MURANO_USER=$(keystone user-create \
        --name=murano \
        --pass="$SERVICE_PASSWORD" \
        --tenant_id $SERVICE_TENANT \
        --email=murano@example.com \
        | grep " id " | get_field 2)
    keystone user-role-add \
        --tenant-id $SERVICE_TENANT \
        --user-id $MURANO_USER \
        --role-id $ADMIN_ROLE

    if [[ "$KEYSTONE_CATALOG_BACKEND" = 'sql' ]]; then
        MURANO_SERVICE=$(keystone service-create \
            --name=murano \
            --type=data_processing \
            --description="Murano Data Processing" \
            | grep " id " | get_field 2)
        keystone endpoint-create \
            --region RegionOne \
            --service_id $MURANO_SERVICE \
            --publicurl "$MURANO_SERVICE_PROTOCOL://$MURANO_SERVICE_HOST:$MURANO_SERVICE_PORT/v1.1/\$(tenant_id)s" \
            --adminurl "$MURANO_SERVICE_PROTOCOL://$MURANO_SERVICE_HOST:$MURANO_SERVICE_PORT/v1.1/\$(tenant_id)s" \
            --internalurl "$MURANO_SERVICE_PROTOCOL://$MURANO_SERVICE_HOST:$MURANO_SERVICE_PORT/v1.1/\$(tenant_id)s"
    fi
}


function generate_sample_certificate {
    local location=$1
    local cert_name=$2

    local old_pwd=$(pwd)
    cd $location

    openssl genrsa -des3 -passout pass:x -out "$cert_name.pass.key" 2048
    openssl rsa -passin pass:x -in "$cert_name.pass.key" -out "$cert_name.key"
    rm "$cert_name.pass.key"

    openssl req -new \
     -subj "/C=RU" \
     -subj "/ST=Center" \
     -subj "/L=Moscow" \
     -subj "/O=Mirantis" \
     -subj "/OU=Murano" \
     -subj "/CN=murano" \
     -subj "/emailAddress=murano-all@mirantis.com" \
     -key "$cert_name.key" -out "$cert_name.csr"

    openssl x509 -req -days 365 \
      -in "$cert_name.csr" \
      -signkey "$cert_name.key" \
      -out "$cert_name.crt"

    cd $old_pwd
}


function install_prerequisites {
    if [[ "$os_VENDOR" =~ (Debian) ]]; then
        echo_summary "Installing additional software sources"
        apt-get install -y python-software-properties
        add-apt-repository -y cloud-archive:havana

        echo_summary "Installing additional packages"
        apt-get install -y node-less python-pip

        echo_summary "Upgrading 'pip'"
        pip install --upgrade pip
        #rm /usr/bin/pip
        #ln -s /usr/local/bin/pip /usr/bin/pip

        echo_summary "Upgrading 'pbr'"
        pip install --upgrade pbr
    fi

    if is_fedora ; then
        echo_summary "Upgrading 'pip'"
        pip install --upgrade pip
        #rm /usr/bin/pip
        #ln -s /usr/local/bin/pip /usr/bin/pip

        echo_summary "Disabling firewall"
        service iptables stop
        chkconfig iptables off

        echo_summary "Disabling SELinux"
        setenforce permissive
        iniset '' 'SELINUX' 'permissive' '/etc/selinux/config'
    fi
}

function install_pip_requirements() {
    local project_dir=$1
    local exclude_list=$2

    cp "$project_dir/requirements.txt" "$project_dir/requirements.txt.bak"
    while read expr ; do
        [[ -z "$expr" ]] && continue
        sed -ri "s/($expr)/#\1/" "$project_dir/requirements.txt"
    done <<< "$exclude_list"
    $SUDO pip install -r "$project_dir/requirements.txt"

    mv "$project_dir/requirements.txt.bak" "$project_dir/requirements.txt"
}


function install_murano_common_app() {
    git_clone $MURANO_COMMON_REPO $MURANO_COMMON_DIR $MURANO_COMMON_BRANCH

    install_pip_requirements "$MURANO_COMMON_DIR" ""

    setup_develop $MURANO_COMMON_DIR
}


function install_murano_api_app() {
    git_clone $MURANO_API_REPO $MURANO_API_DIR $MURANO_API_BRANCH

    install_pip_requirements "$MURANO_API_DIR" "http.*murano-common.*"

    setup_develop $MURANO_API_DIR
}


function install_murano_conductor_app() {
    git_clone $MURANO_CONDUCTOR_REPO $MURANO_CONDUCTOR_DIR $MURANO_CONDUCTOR_BRANCH

    install_pip_requirements "$MURANO_CONDUCTOR_DIR" "http.*murano-common.*
http.*murano-metadataclient.*"

    setup_develop $MURANO_CONDUCTOR_DIR
}


function install_murano_repository_app() {
    git_clone $MURANO_REPOSITORY_REPO $MURANO_REPOSITORY_DIR $MURANO_REPOSITORY_BRANCH

    install_pip_requirements "$MURANO_REPOSITORY_DIR" ""

    setup_develop $MURANO_REPOSITORY_DIR
}


function install_murano_metadataclient_app() {
    git_clone $MURANO_METADATACLIENT_REPO $MURANO_METADATACLIENT_DIR $MURANO_METADATACLIENT_BRANCH

    $SUDO pip install -r "$MURANO_METADATACLIENT_DIR/requirements.txt"

    setup_develop $MURANO_METADATACLIENT_DIR
}


# Entry points
# ------------

# cleanup_murano() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_murano() {
    # This function intentionally left blank
    rm -rf "$MURANO_CONF_DIR"
}

# configure_murano() - Set config files, create data dirs, etc
function configure_murano {
    local project_dir

    echo_summary "Copying config files"

    if [[ ! -d "$MURANO_CONF_DIR" ]]; then
        sudo mkdir -p "$MURANO_CONF_DIR"
    fi
    sudo chown $STACK_USER "$MURANO_CONF_DIR"

    rm -f "$MURANO_CONF_DIR"/*.conf

    echo_summary "Copying Murano config files"
    while read project_dir; do
        [[ -z "$project_dir" ]] && continue
        if [[ -d "$project_dir/etc/murano" ]]; then
            cp -r "$project_dir/etc/murano"/* "$MURANO_CONF_DIR"
        else
            cp -r "$project_dir/etc"/* "$MURANO_CONF_DIR"
        fi
    done <<< "$MURANO_API_DIR
$MURANO_CONDUCTOR_DIR
$MURANO_REPOSITORY_DIR"

    echo_summary "Configuring Murano"

#    if [[ "$os_VENDOR" =~ (Debian) ]]; then
#        MURANO_CONFIG_FILES="$MURANO_CONFIG_FILES
#/etc/openstack-dashboard/local_settings.py"
#    fi

#    if [[ is_fedora ]]; then
#        MURANO_CONFIG_FILES="$MURANO_CONFIG_FILES
#/etc/openstack-dashboard/local_settings"
#    fi

    while read config_file; do
        echo_summary "Configuring file '$config_file'"

        if [[ ! -f "$config_file" ]]; then
            cp "$config_file.sample" "$config_file"
        fi

        case "$config_file" in
            '/etc/murano/murano-api.conf')
                iniset "$config_file" 'DEFAULT' 'log_file' "$MURANO_LOG_DIR/murano-api.log"
                iniset "$config_file" 'rabbitmq' 'host' "$MURANO_RABBIT_HOST"
                iniset "$config_file" 'rabbitmq' 'port' "$MURANO_RABBIT_PORT"
                iniset "$config_file" 'rabbitmq' 'login' "$MURANO_RABBIT_LOGIN"
                iniset "$config_file" 'rabbitmq' 'password' "$MURANO_RABBIT_PASSWORD"
                iniset "$config_file" 'rabbitmq' 'virtual_host' "$MURANO_RABBIT_VHOST"
                iniset "$config_file" 'rabbitmq' 'ssl' "False"
                iniset "$config_file" 'keystone_authtoken' 'auth_host' "$auth_host"
                iniset "$config_file" 'keystone_authtoken' 'admin_user' "$ADMIN_USER"
                iniset "$config_file" 'keystone_authtoken' 'admin_password' "$ADMIN_PASSWORD"
            ;;
            '/etc/murano/murano-repository.conf')
                iniset "$config_file" 'DEFAULT' 'log_file' "$MURANO_LOG_DIR/murano-repository.log"
                iniset "$config_file" 'DEFAULT' 'cache_dir' "$MURANO_REPOSITORY_CACHE"
                iniset "$config_file" 'keystone' 'auth_host' "$auth_host"
                iniset "$config_file" 'keystone' 'admin_user' "$ADMIN_USER"
                iniset "$config_file" 'keystone' 'admin_password' "$ADMIN_PASSWORD"
            ;;
            '/etc/murano/conductor.conf')
                iniset "$config_file" 'DEFAULT' 'log_file' "$MURANO_LOG_DIR/murano-conductor.log"
                iniset "$config_file" 'DEFAULT' 'data_dir' "$MURANO_CONDUCTOR_CACHE"
                iniset "$config_file" 'DEFAULT' 'init_scripts_dir' '/etc/murano/init-scripts'
                iniset "$config_file" 'DEFAULT' 'agent_config_dir' '/etc/murano/agent-config'
                iniset "$config_file" 'keystone' 'auth_url' "$auth_url"
                iniset "$config_file" 'rabbitmq' 'host' "$MURANO_RABBIT_HOST"
                iniset "$config_file" 'rabbitmq' 'port' "$MURANO_RABBIT_PORT"
                iniset "$config_file" 'rabbitmq' 'login' "$MURANO_RABBIT_LOGIN"
                iniset "$config_file" 'rabbitmq' 'password' "$MURANO_RABBIT_PASSWORD"
                iniset "$config_file" 'rabbitmq' 'virtual_host' "$MURANO_RABBIT_VHOST"
                iniset "$config_file" 'rabbitmq' 'ssl' "False"
            ;;
            #'/etc/openstack-dashboard/local_settings')
            #    iniset "$config_file" '' 'OPENSTACK_HOST' "'$auth_host'"
            #    iniset "$config_file" '' 'ALLOWED_HOSTS' "'*'"
            #;;
            #'/etc/openstack-dashboard/local_settings.py')
            #    iniset "$config_file" '' 'OPENSTACK_HOST' "'$auth_host'"
            #    iniset "$config_file" '' 'ALLOWED_HOSTS' "'*'"
            #;;
            '/etc/murano/init-scripts/init.ps1')
                [[ -n "$MURANO_FILE_SHARE_HOST" ]] && \
                  replace '%MURANO_SERVER_ADDRESS%' "$MURANO_FILE_SHARE_HOST" "$config_file"
            ;;
            '/etc/murano/agent-config/Default.template')
                [[ -n "$MURANO_RABBIT_HOST_ALT" ]] && \
                  replace '%RABBITMQ_HOST%' "$MURANO_RABBIT_HOST_ALT" "$config_file"
            ;;
        esac

        if [[ "$MURANO_SSL_ENABLED" = 'true' ]]; then
            case "$config_file" in
                '/etc/murano/murano-api.conf')
                    generate_sample_certificate '/etc/murano' 'server'
                    iniset "$config_file" 'ssl' 'cert_file' '/etc/murano/server.crt'
                    iniset "$config_file" 'ssl' 'key_file' '/etc/murano/server.key'
                    iniset "$config_file" 'rabbitmq' 'ssl' "True"
                    iniset "$config_file" 'keystone_authtoken' 'auth_protocol' 'https'
                ;;
                '/etc/murano/conductor.conf')
                    local ssl_insecure='True'
                    # If any variable is not empty then ssl_insecure = False
                    if [[ -n "${MURANO_SSL_CA_FILE}${MURANO_SSL_CERT_FILE}${MURANO_SSL_KEY_FILE}" ]]; then
                        ssl_insecure='False'
                    fi

                    iniset "$config_file" 'keystone' 'ca_file' "$MURANO_SSL_CA_FILE"
                    iniset "$config_file" 'keystone' 'cert_file' "$MURANO_SSL_CERT_FILE"
                    iniset "$config_file" 'keystone' 'key_file' "$MURANO_SSL_KEY_FILE"
                    iniset "$config_file" 'keystone' 'insecure' "$ssl_insecure"

                    iniset "$config_file" 'heat' 'ca_file' "$MURANO_SSL_CA_FILE"
                    iniset "$config_file" 'heat' 'cert_file' "$MURANO_SSL_CERT_FILE"
                    iniset "$config_file" 'heat' 'key_file' "$MURANO_SSL_KEY_FILE"
                    iniset "$config_file" 'heat' 'insecure' "$ssl_insecure"

                    iniset "$config_file" 'rabbitmq' 'ssl' "True"
                ;;
                '/etc/murano/agent-config/Default.template')
                    replace '%RABBITMQ_SSL%' 'true' "$config_file"
                ;;
#                '/usr/share/openstack-dashboard/openstack_dashboard/settings.py')
#                    echo '' >> "$config_file"
#                    echo "MURANO_API_INSECURE = True" >> "$config_file"
#                    echo "MURANO_API_URL = 'https://localhost:8082'" >> "$config_file"
#                ;;
#                '/etc/openstack-dashboard/local_settings'|'/etc/openstack-dashboard/local_settings.py')
#                    cat << 'EOF' >> "$config_file"
#
##murano-git-install-block-start
#OPENSTACK_SSL_NO_VERIFY = True
#OPENSTACK_KEYSTONE_URL = "https://%s:5000/v2.0" % OPENSTACK_HOST
#OPENSTACK_KEYSTONE_ADMIN_URL = "https://%s:35357/v2.0" % OPENSTACK_HOST
#QUANTUM_URL = "https://%s" % OPENSTACK_HOST
##murano-git-install-block-end
#EOF
#                ;;
            esac
        fi
    done <<< "$MURANO_CONFIG_FILES"

    sudo mkdir -p "$MURANO_LOG_DIR"
    sudo chown $STACK_USER -R "$MURANO_LOG_DIR"

    sudo mkdir -p $MURANO_CONDUCTOR_CACHE
    sudo chown $STACK_USER -R $MURANO_CONDUCTOR_CACHE

    sudo mkdir -p $MURANO_REPOSITORY_CACHE
    sudo chown $STACK_USER -R $MURANO_REPOSITORY_CACHE

    sudo mkdir -p /tmp/keystone-muranorepository
    sudo chown $STACK_USER -R /tmp/keystone-muranorepository

    sudo mkdir -p /tmp/keystone-signing-muranoapi
    sudo chown $STACK_USER -R /tmp/keystone-signing-muranoapi
}

# init_murano() - Initialize databases, etc.
function init_murano() {
    # clean up from previous (possibly aborted) runs
    # create required data files
    :
}

# install_murano() - Collect source and prepare
function install_murano() {
    echo_summary "Install Murano"
    install_murano_common_app
    install_murano_api_app
    install_murano_conductor_app
    install_murano_repository_app
    install_murano_metadataclient_app
}

# start_murano() - Start running processes, including screen
function start_murano() {
    screen_it murano-api        "cd $MURANO_API_DIR;        muranoapi/cmd/api.py        --config-file $MURANO_CONF_DIR/murano-api.conf"
    screen_it murano-conductor  "cd $MURANO_CONDUCTOR_DIR;  muranoconductor/cmd/run.py  --config-file $MURANO_CONF_DIR/conductor.conf"
    screen_it murano-repository "cd $MURANO_REPOSITORY_DIR; muranorepository/cmd/run.py --config-file $MURANO_CONF_DIR/murano-repository.conf"
}

# stop_murano() - Stop running processes
function stop_murano() {
    # Kill the Murano screen windows
    screen -S $SCREEN_NAME -p murano-api -X kill
    screen -S $SCREEN_NAME -p murano-conductor -X kill
    screen -S $SCREEN_NAME -p murano-repository -X kill
}


# Restore xtrace
$XTRACE

# Local variables:
# mode: shell-script
# End:
